#!/usr/bin/python

from lxml import etree
import cgi
import sys
import time

def application(environ, start_response):
    path = environ['PATH_INFO']

    if path == '/':
        start_response("302 Found", [('Content-Type', 'text/html'), ('Location','/index.html')])
        return ''
    
    if path == '/index.html':
        zone_tree = etree.parse('zones.xml')
        zone_options = ''
        for zone in zone_tree.xpath('/zones/zone'):
            zone_options += '<option value="' + zone.get('id') + '">' + zone.get('name') + '</option>'
        climate_tree = etree.parse('climates.xml')
        climate_options = ''
        for climate in climate_tree.xpath('/climates/climate'):
            climate_options += '<option value="' + climate.get('id') + '">' + climate.get('name') + '</option>'
        state_tree = etree.parse('state.xml')
        thermostat_tree = etree.parse('thermostats.xml')
        temperature_tree = etree.parse('temperatures.xml')
        target_tree = etree.parse('targets.xml')
        thermostats = ''
        for thermostat in thermostat_tree.xpath('/thermostats/thermostat'):
            name = thermostat.get('name')
            if not name: continue
            id = thermostat.get('id')
            thermometer_id = thermostat.get('thermometer-id')
            zone_id = thermostat.get('zone-id')
            try:
                state = state_tree.xpath("/thermostat-states/thermostat-state[@thermostat-id='%s']" % id)[0].text
            except:
                state = 'unknown'
            try:
                current = temperature_tree.xpath("/temperatures/temperature[@thermometer-id='%s']" % thermometer_id)[0].text
            except:
                current = 0
            try:
                target = target_tree.xpath("/targets/target[@zone-id='%s']" % zone_id)[0].text
            except:
                target = 0
            thermostats += '<tr><td>%s</td><td>%s</td><td>%0.1f</td><td>%0.1f</td></tr>' % (name, state, float(current), float(target))
            
                
        start_response("200 Found", [('Content-Type', 'text/html')])
        return """<!DOCTYPE html>
<html>
  <head>
    <title>Pimp My Heat</title>
  </head>
  <body>
    <h1>Thermostats</h1>
    <table>
      <tr>
        <th>Name</th>
        <th>State</th>
        <th>Current</th>
        <th>Target</th>
      </tr>
      %s
    </table>
    <h1>Override</h1>
    <div>
      <form method='POST' action='pimp.html'>
        <select name="zone">
          %s
        </select>
        <select name="climate">
          %s
        </select>
        <select name="duration">
          <option value="1800">30 minutes</option>
          <option value="3600">1 hour</option>
          <option value="7200">2 hours</option>
        </select>
        <input type="submit" name="pimp" value="Override" />
      </form>
    </div>
  </body>
</html>""" % (thermostats, zone_options, climate_options)

    if path == '/pimp.html':
        fs = cgi.FieldStorage(fp=environ['wsgi.input'], environ=environ)
        routines_tree = etree.parse('routines.xml')
        overrides = routines_tree.xpath('/routines/overrides')[0]
        override = etree.Element('override')
        override.set('zone-id', fs.getfirst('zone'))
        override.set('climate-id', fs.getfirst('climate'))
        override.set('end', time.strftime('%Y-%m-%dT%H:%M:00', time.localtime(time.time() + int(fs.getfirst('duration')))))
        overrides.append(override)
        f = open('routines.xml', 'w')
        f.write(etree.tostring(routines_tree, encoding='utf-8', pretty_print=True, xml_declaration=True))
        f.close()
        start_response("302 Found", [('Content-Type', 'text/html'), ('Location','/index.html')])
        return ''

if __name__ == "__main__":
    from wsgiref.simple_server import make_server
    try:
        make_server('', 80, application).serve_forever()
    except:
        print >>sys.stderr, "Port 80 failed .... trying 8000"
        make_server('', 8000, application).serve_forever()


