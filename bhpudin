#!/usr/bin/python

# Copyright 2010 John Hedges
#
# This file is part of bhp.
#
# bhp is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# bhp is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# bhp. If not, see <http://www.gnu.org/licenses/>.

import argparse, os, sys, serial

class UdinException(Exception):
    pass

class Udin:
    def __init__(self, device_path):
        self._tty = serial.Serial(device_path, timeout=1)

    def switch(self, device, state):
        """device 1-8, state 'on' or 'off'"""
        if state == 'on':
            self._send_command('n' + device)
        else:
            self._send_command('f' + device)

    def get_state(self):
        self._send_command('s0')
        return self._recv()

    def set_state(self, state):
        self._send_command('r%d' % state)

    def _send_command(self, command, attempts=3):
        self._tty.write(command + '\r')
        echo = self._recv()
        if echo != command:
            self._tty.flushOutput()
            self._tty.flushInput()
            if --attempts:
                self._send_command(command, attempts)
            else:
                raise UdinException()
            
    def _recv(self):
        return self._tty.readline()[:-2]

    def close(self):
        self._tty.close()

parser = argparse.ArgumentParser(description='Control the UDIN device')
parser.add_argument('-s', '--status', action='store_true', help='get the current switch settings')
parser.add_argument('-r', '--reset', type=int, nargs='?', const='0', help='set the current switch settings (without param sets all to off)')
parser.add_argument('-d', '--device', default='/dev/ttyUSB0', help='sepcify UDIN device (defaults to /dev/ttyUSB0)')
parser.add_argument('command', nargs='*', help='command pairs eg. 1 on 2 off ...')
args = parser.parse_args()

try:
    if len(args.command) % 2:
        raise Exception()
    for arg in args.command[0::2]:
        device = int(arg)
        if device < 1 or device > 8:
            raise Exception()
    for arg in args.command[1::2]:
        if arg != 'on' and arg != 'off':
            raise Exception()
except Exception:
    parser.print_help()
    sys.exit(-1)

try:
    udin = Udin(args.device)
    if type(args.reset) == int and args.reset >= 0:
        udin.set_state(args.reset & 0xff)
    for device, state in zip(args.command[0::2], args.command[1::2]):
        udin.switch(device, state)
    if args.status:
         sys.stdout.write(udin.get_state()+'\n')
    udin.close()
except Exception as e:
    sys.stderr.write(os.path.basename(sys.argv[0]) + ': ' + str(e) + '\n')
    sys.exit(-1)
